<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">
	<!-- 第二步：hibernate与spring整合配置=========================================================== -->
	<!-- hibernate与spring整合方法一：仍然使用外部hibernate.cfg.xml配置 -->
	<!-- <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="configLocations" value="classpath:hibernate.cfg.xml"></property>
	</bean> -->
	<!-- hibernate与spring整合方法二【推荐】：将hibernate配置放入spring中 -->
	<!-- <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		基础信息
		<property name="hibernateProperties">
			<props>
				必须配置的信息
				<prop key="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</prop>
				<prop key="hibernate.connection.url">jdbc:oracle:thin:@192.168.0.95:1521:orcl</prop>
				<prop key="hibernate.connection.username">weixintest</prop>
				<prop key="hibernate.connection.password">zxec11</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				可选配置
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		指定ORM源数据，指定包路径，spring自动读取
		<property name="mappingDirectoryLocations" value="classpath:com/ssh/pojo"></property>
	</bean> -->
	<!-- hibernate与spring整合配置================================================================= -->
	
	
	<!-- 第三步：引入c3p0连接池管理工具，也可以使用其他工具，如阿里巴巴的连接池管理工具==================== -->
	<context:property-placeholder location="classpath:druid.properties"/>
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- hibernate配置修改为如下【hibernate.cfg.xml文件基本可以删除了】： -->
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<!-- 必须配置的信息 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<!-- 可选配置 -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 指定ORM源数据，指定包路径，spring自动读取 -->
		<property name="mappingDirectoryLocations" value="classpath:com/ssh/pojo"></property>
	</bean>
	<!-- 引入c3p0连接池管理工具============================================================= -->
	
	
	<!-- 第一步：struts2与spring整合配置=========================================================== -->
	<!-- struts2与spring整合方案一：不需要手动注入，注意beanName属性应该和action中的属性名一致 -->
	<!-- <bean name="userAction" class="com.ssh.web.acion.UserAcion"></bean> -->
	<!-- struts2与spring整合方案二：需要手动注入action需要的属性 -->
	<bean name="userAction" class="com.ssh.web.acion.UserAcion">
		<property name="userService" ref="userService"></property>
	</bean>
	<!-- service -->
	<bean name="userService" class="com.ssh.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>
	<!-- struts2与spring整合配置=========================================================== -->
	
	<!-- 第四步：hibernateTemplate与spring整合配置================================================= -->
	<bean name="userDao" class="com.ssh.dao.impl.UserDaoImpl">
		<!-- 注入sessionfactory -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- hibernateTemplate与spring整合配置=========================================================== -->
	
	<!-- 第五步：事务配置================================================= -->
	<!-- 方式一：xml配置方式 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
		<!-- 配置通知 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager" >
		<tx:attributes>
			以方法为单位使用通配符，表示以该方法名开头的方法都会添加对应的事务属性
			<tx:method name="save*"     isolation="READ_COMMITTED" propagation="REQUIRED" read-only="false" />
			<tx:method name="persist*"  isolation="READ_COMMITTED" propagation="REQUIRED" read-only="false"/>
			<tx:method name="update*"	isolation="READ_COMMITTED" propagation="REQUIRED" read-only="false"/>
			<tx:method name="modify*"	isolation="READ_COMMITTED" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delete*"	isolation="READ_COMMITTED" propagation="REQUIRED" read-only="false"/>
			<tx:method name="remove*"	isolation="READ_COMMITTED" propagation="REQUIRED" read-only="false"/>
			<tx:method name="get*"		isolation="READ_COMMITTED" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*"		isolation="READ_COMMITTED" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice> -->
		<!--将通知织入对象 
			aop:pointcut  配置切点
			aop:advisor   配置切面
		-->
	<!-- <aop:config>
		<aop:pointcut expression="execution(* com.ssh.service.impl.*ServiceImpl.*(..))" id="txpc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txpc"/>
	</aop:config> -->
	<!-- 方式二：注解配置方式 -->
	<bean name="userService2" class="com.ssh.service.impl.UserServiceImpl2">
		<property name="userDao" ref="userDao"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- 事务配置================================================= -->
	
</beans>